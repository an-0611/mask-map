{"version":3,"sources":["components/SearchBar.js","components/SideBar.js","components/SearchMap.js","components/ShopInfo.js","containers/index.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","placeholder","SideBarContainer","styled","div","SideBarToggleBtn","SideBar","SearchMap","ShopInfo","MapContainer","AppContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAmBeA,MARf,WACE,OACE,6BACE,2BAAOC,YAAY,qD,wXCVzB,IAAMC,EAAmBC,IAAOC,IAAV,KAahBC,EAAmBF,IAAOC,IAAV,KAcPE,MAVf,WACE,OACE,kBAACJ,EAAD,KACE,kBAACG,EAAD,KAAmB,KACnB,kBAAC,EAAD,MAFF,yCCNWE,MANf,WACE,OACE,wDCIWC,MANf,WACE,OACE,iICGWC,MAXf,WACE,OACE,kBAAC,WAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,4G,sLCPR,IAAMC,EAAeP,IAAOC,IAAV,KAgBHO,MARf,WACE,OACE,kBAACD,EAAD,KACE,kBAAC,EAAD,QCHcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d7507d46.chunk.js","sourcesContent":["import React from 'react';\n// import styled from 'styled-components';\n// const Button = styled.button`\n//   background: transparent;\n//   border-radius: 3px;\n//   border: 2px solid palevioletred;\n//   color: palevioletred;\n//   margin: 0 1em;\n//   padding: 0.25em 1em;\n// `\n\nfunction SearchBar() {\n  return (\n    <div>\n      <input placeholder=\"SearchBar 搜尋指定店家\" />\n    </div>\n  );\n}\n\nexport default SearchBar;","import React from 'react';\nimport styled from 'styled-components';\nimport SearchBar from './SearchBar';\n\nconst SideBarContainer = styled.div`\n  min-width: 30vw;\n  height: 100%;\n  position: relative;\n  top: 0;\n  left: 0;\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid palevioletred;\n  color: palevioletred;\n  padding: 0.25em 1em;\n`\n\nconst SideBarToggleBtn = styled.div`\n  // position\n`\n\nfunction SideBar() {\n  return (\n    <SideBarContainer>\n      <SideBarToggleBtn>{'<'}</SideBarToggleBtn>\n      <SearchBar />\n      附近藥局資訊\n    </SideBarContainer>\n  );\n}\n\nexport default SideBar;","import React from 'react';\n// import styled from 'styled-components';\n// const Button = styled.button`\n//   background: transparent;\n//   border-radius: 3px;\n//   border: 2px solid palevioletred;\n//   color: palevioletred;\n//   margin: 0 1em;\n//   padding: 0.25em 1em;\n// `\n\nfunction SearchMap() {\n  return (\n    <div>SearchMap 地圖</div>\n  );\n}\n\nexport default SearchMap;","import React from 'react';\n// import styled from 'styled-components';\n// const Button = styled.button`\n//   background: transparent;\n//   border-radius: 3px;\n//   border: 2px solid palevioletred;\n//   color: palevioletred;\n//   margin: 0 1em;\n//   padding: 0.25em 1em;\n// `\n\nfunction ShopInfo() {\n  return (\n    <div>ShopInfo 點選商家後顯示庫存量 位置 電話</div>\n  );\n}\n\nexport default ShopInfo;","import React, { Fragment } from 'react';\nimport SideBar from '../components/SideBar';\nimport SearchMap from '../components/SearchMap';\nimport ShopInfo from '../components/ShopInfo';\n\nfunction MapContainer() {\n  return (\n    <Fragment>\n        <SideBar />\n        <SearchMap />\n        <ShopInfo />\n        <div>notify 你訂閱的店家口罩進貨了</div>\n    </Fragment>\n  );\n}\n\nexport default MapContainer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport MapContainer from './containers/index';\n\nconst AppContainer = styled.div`\n  height: 100vh;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nfunction App() {\n  return (\n    <AppContainer>\n      <MapContainer />\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}